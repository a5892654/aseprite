name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Release]
        enable_ui: [on]
    steps:
      - uses: actions/checkout@v3.5.0
        with:
          submodules: 'recursive'

      - name: Set up CCache (Linux only)
        uses: hendrikmuhs/ccache-action@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          key: ${{ matrix.os }}-${{ matrix.enable_ui }}

      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set up MSVC (Windows only)
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ runner.os == 'Windows' }}

      - name: Install CMake
        run: |
          if (${{ runner.os }} == 'Windows') {
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          } else {
            sudo apt-get update
            sudo apt-get install -y cmake
          }
        shell: pwsh

      - name: Install Dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y libx11-dev libxcursor-dev libxi-dev
        shell: bash

      - name: Install 7-Zip (Windows only)
        if: ${{ runner.os == 'Windows' }}
        run: choco install 7zip -y
        shell: pwsh

      - name: Verify 7-Zip Installation (Windows only)
        if: ${{ runner.os == 'Windows' }}
        run: |
          & "C:\Program Files\7-Zip\7z.exe" --version
        shell: pwsh

      - name: Generating Makefiles (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          export enable_ccache=on
          curl -L https://github.com/blueloveTH/aseprite/releases/download/v0.01/skia.zip --output skia.zip
          7z x skia.zip
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DENABLE_UI=${{ matrix.enable_ui }} \
            -DENABLE_CCACHE=$enable_ccache \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=./skia \
            -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 \
            -DSKIA_LIBRARY=./skia/out/Release-x64/skia.lib
        shell: bash

      - name: Generating Makefiles (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          $env:enable_ccache = "off"
          Invoke-WebRequest -Uri "https://github.com/blueloveTH/aseprite/releases/download/v0.01/skia.zip" -OutFile "skia.zip"
          & "C:\Program Files\7-Zip\7z.exe" x skia.zip
          cmake -S . -B build -G Ninja `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DENABLE_UI=${{ matrix.enable_ui }} `
            -DENABLE_CCACHE=$env:enable_ccache `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR=./skia `
            -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 `
            -DSKIA_LIBRARY=./skia/out/Release-x64/skia.lib
        shell: pwsh

      - name: List Build Directory Contents (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: ls -R build
        shell: bash

      - name: List Build Directory Contents (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: Get-ChildItem -Recurse build
        shell: pwsh

      - name: Compiling (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          cd build
          ninja
        shell: bash

      - name: Compiling (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          cd build
          ninja
        shell: pwsh

      - name: List Build Output (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: ls -R build/bin
        shell: bash

      - name: List Build Output (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: Get-ChildItem -Recurse build\bin
        shell: pwsh

      - name: Upload Artifact (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v3
        with:
          name: aseprite
          path: |
            build/bin/data
            build/bin/aseprite

      - name: Upload Artifact (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: aseprite
          path: |
            build\bin\data
            build\bin\aseprite.exe
